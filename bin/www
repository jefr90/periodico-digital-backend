#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app")
var debug = require("debug")("distribuidos-periodico:server")
var http = require("http")

const url = require('url');
const {startServer, startWebsocket} = require("../services/websockets")
const {startPublishers} = require("../services/pubSub.js")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000")
app.set("port", port)

//Websockets
const wsServer1 = startServer()
const wsServer2 = startServer()
const wsServer3 = startServer()
const wsServer4 = startServer()

startWebsocket(wsServer1, wsServer2, wsServer3, wsServer4)
/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on("error", onError)
server.on("listening", onListening)

startPublishers()

server.on("upgrade", (request, socket, head) => {
  const pathname = url.parse(request.url).pathname;

  if (pathname === '/1') {
    wsServer1.handleUpgrade(request, socket, head, function done(ws) {
      wsServer1.emit('connection', ws, request);
    });
  } else if (pathname === '/2') {
    wsServer2.handleUpgrade(request, socket, head, function done(ws) {
      wsServer2.emit('connection', ws, request);
    });
  } else if (pathname === '/3') {
    wsServer3.handleUpgrade(request, socket, head, function done(ws) {
      wsServer3.emit('connection', ws, request);
    });
  }else if (pathname === '/4') {
    wsServer4.handleUpgrade(request, socket, head, function done(ws) {
      wsServer4.emit('connection', ws, request);
    });
  } else {
    socket.destroy();
  }
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  debug("Listening on " + bind)
}
